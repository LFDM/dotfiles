# From the TextMate bundle
# with some modification

snippet fun "Function" b
${1:name} = `!p snip.rv = "(" if t[2] else ""`${2:args}`!p snip.rv = ") " if t[2] else ""`->
	${0:# body...}
endsnippet

snippet bfun "Function (bound)" i
`!p snip.rv = "(" if t[1] else ""`${1:args}`!p snip.rv = ") " if t[1] else ""`=>`!p snip.rv = " " if t[2] and not t[2].startswith("\n") else ""`${2:expr}
endsnippet

snippet if "If"
if ${1:condition}
	${0:# body...}
endsnippet

snippet ife "If .. Else"
if ${1:condition}
	${2:# body...}
else
	${3:# body...}
endsnippet

snippet eif "Else if" b
else if ${1:condition}
	${0:# body...}
endsnippet

snippet ifte "Ternary if"
if ${1:condition} then ${2:value} else ${3:other}
endsnippet

snippet unl "Unless"
${1:action} unless ${2:condition}
endsnippet

snippet fora "Array Comprehension"
for ${1:name} in ${2:array}
	${0:# body...}
endsnippet

snippet foro "Object Comprehension"
for ${1:key}, ${2:value} of ${3:Object}
	${0:# body...}
endsnippet

snippet forr "Range Comprehension (inclusive)"
for ${1:name} in [${2:start}..${3:finish}]`!p snip.rv = " by " if t[4] else ""`${4:step}
	${0:# body...}
endsnippet

snippet forrex "Range Comprehension (exclusive)"
for ${1:name} in [${2:start}...${3:finish}]`!p snip.rv = " by " if t[4] else ""`${4:step}
	${0:# body...}
endsnippet

snippet swi "Switch"
switch ${1:object}
	when ${2:value}
		${3:# body...}
	else
		$0
endsnippet

snippet swit "Switch when .. then"
switch ${1:object}
	when ${2:condition}`!p snip.rv = " then " if t[3] else ""`${3:value}
	else`!p snip.rv = " " if t[4] and not t[4].startswith("\n") else ""`${4:value}
endsnippet

snippet cla "Class" b
class ${1:ClassName}`!p snip.rv = " extends " if t[2] else ""`${2:Ancestor}

	${3:constructor:`!p snip.rv = " (" if t[4] else ""`${4:args}`!p snip.rv = ")" if t[4] else ""` ->
		${5:# body...}}
	$0
endsnippet

snippet try "Try .. Catch"
try
	$1
catch ${2:error}
	$3
endsnippet

snippet req "Require" b
${1/^'?(\w+)'?$/\L$1\E/} = require(${1:'${2:sys}'})
endsnippet

snippet # "Interpolated Code" i
#{$1}$0
endsnippet

snippet log "Log" b
console.log ${1:"${2:msg}"}
endsnippet

###########################################################################
#                             Customizations                              #
###########################################################################

snippet f "Function" b
${1:name} = `!p snip.rv = "(" if t[2] else ""`${2:args}`!p snip.rv = ") " if t[2] else ""`->
	${0:# body...}
endsnippet

snippet us "use strict" !b
'use strict'

$0
endsnippet

snippet ip "interpolation"
#{$0}
endsnippet

#############
#  Angular  #
#############


snippet am "angular module" !b
angular.module('$1').
endsnippet

#############
#  Jasmine  #
#############

snippet spec "New spec file" !b
describe "$1", ->
	$1 = null

	$0
endsnippet

snippet specd "New spec file for a directive" !b
describe "$1", ->
	scope = el = $compile = null

	beforeEach module "$2$1"

	beforeEach inject ($rootScope, _$compile_) ->
		el = null
		scope = $rootScope.$new()
		$compile = _$compile_

	compile = (tpl = template) ->
		el = angular.element(tpl)
		$compile(el)(scope)
		scope.$digest()

	template = '$3'
endsnippet

snippet d "describe block" !b
describe "${1:description}", ->
	$0
endsnippet

snippet desc "describe block" b!
describe "${1:description}", ->
	$0
endsnippet

snippet it "it block" !b
it "${1:description}", ->
	$0
endsnippet

snippet be "beforeEach" !b
beforeEach ->
	$0
endsnippet

snippet bem "before each module" !b
beforeEach module "$1"
endsnippet

snippet bemp "before each module provide" !b
beforeEach module "$1", ($provide) ->
	$provide.$2
endsnippet

global !p
def assign_injections(injections, indentation, re):
	indent = indentation + '\t'
	args = injections.split(', ')
	vars = []
	for var in args:
		m = re.match('^_(.*)_$', var)
		if m:
			vars.append('\n%s%s = %s' % (indent, m.groups()[0], var))

	return ''.join(vars)
endglobal

snippet bei "before each inject" !b
beforeEach inject ($1) ->`!p snip.rv = assign_injections(t[1], snip._initial_indent, re)`
	$0
endsnippet

snippet ete "expect to equal" !b
expect(${1:actual}).toEqual(${0:expected})
endsnippet

snippet eted "expect to equal data" !b
expect(${1:actual}).toEqualData(${0:expected})
endsnippet

snippet etb "expect to be" !b
expect(${1:actual}).toBe(${0:expected})
endsnippet

snippet ett "expect to be truthy" !b
expect(${1:actual}).toBeTruthy()
endsnippet

snippet etf "expect to be falsy" !b
expect(${1:actual}).toBeFalsy()
endsnippet

snippet etd "expect to be defined" !b
expect(${1:actual}).toBeDefined()
endsnippet

snippet etud "expect to be undefined" !b
expect(${1:actual}).toBeUndefined()
endsnippet

snippet etc "expect to contain" !b
expect(${1:actual}).toContain(${0:expected})
endsnippet

snippet ethbc "expect to have been called" !b
expect(${1:actual}).toHaveBeenCalled()
endsnippet

snippet ethbcw "expect to have been called with" !b
expect(${1:actual}).toHaveBeenCalledWith($0)
endsnippet

snippet etth "expect to throw" !b
expect(${1:actual}).toThrow($0)
endsnippet

snippet so "spyOn" !b
spyOn($1, '$2')
endsnippet

snippet soc "spyOn and.callThrough" !b
spyOn($1, '$2').and.callThrough()
endsnippet

snippet sor "spyOn and.returnValue" !b
spyOn($1, '$2').and.returnValue($0)
endsnippet

snippet soe "spyOn with an expectation" !b
spyOn($1, '$2')
expect($1.$2).toHaveBeenCalled()
endsnippet

snippet soae "spyOn and.callThrough with an expectation" !b
spyOn($1, '$2').and.callThrough()
expect($1.$2).toHaveBeenCalled()
endsnippet

snippet hfl "$httpBackend.flush()" !b
$httpBackend.flush()
endsnippet

snippet heg "$httpBackend.expectGET" !b
$httpBackend.expectGET($1).respond(${0:200})
endsnippet

snippet he "$httpBackend.expect" !b
$httpBackend.expect$0($1)
endsnippet

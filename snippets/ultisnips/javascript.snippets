###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element){
	$0
}${10:,}
endsnippet

snippet f: "Object Method"
${1:method_name}: function(${3:attribute}){
	$0
}${10:,}
endsnippet

snippet fs "one liner method" !b
function($1) { $0; }
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) ,,{
	${0}
}

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:var ${4} = $1[$2]};$0
}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${0}
}
endsnippet

# for one line if .. else you usually use a ? b : c
snippet ife "if ___ else"
if (${1}) {
	${2}
} else {
	${3}
}
endsnippet

snippet if "if"
if (${1}) {
	${2}
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10})
endsnippet


###########################################################################
#                             Customizations                              #
###########################################################################

snippet f "function" w
function($1) {
	$0
}
endsnippet

snippet log "console.log call"
console.log($0);
endsnippet

snippet loga "console.log('aaa')" !b
console.log('aaa');
endsnippet

snippet logb "console.log('bbb')" !b
console.log('bbb');
endsnippet

snippet al "alert"
alert($0);
endsnippet

snippet ifs "if shorthand"
if (${1}) { ${2}; }
endsnippet

snippet ifr "if () { return; }" !b
if ($0) { return; }
endsnippet

snippet tc "try - catch" !b
try {
	${1:statements}
} catch(err) {
	${0:catch}
}
endsnippet

snippet vf "named function" !b
function ${1:function_name}($2) {
	$0
}
endsnippet

snippet tf "this.function"
this.${1:function_name} = function(${2:args}) {
	$0
};
endsnippet

snippet cf "class function" !b
$1($2) {
	$3
}
endsnippet

snippet cc "class constructor" !b
constructor($1) {
	$2
}
endsnippet

snippet af "arrow function" !w
($1) => {
	$0
}
endsnippet

snippet afs "arrow function short" !w
($1) => $0
endsnippet

snippet tv "this.variable"
this.${1:variable_name} = ${2:value};
endsnippet

snippet ta "this.variable = variable - this assignment" !b
this.${1} = $1;
endsnippet

snippet taf "this.variable = variable with function" !b
this.${1} = $1;

function $1($2) {
	$0
}
endsnippet

snippet va "vm.variable = variable - vm assignment" !b
vm.${1} = $1;
endsnippet

snippet vaf "this.variable = variable with function" !b
vm.${1} = $1;

function $1($2) {
	$0
}
endsnippet

snippet pv "prototype.variable"
${1:cl}.prototype.${2:var} = ${0:val};
endsnippet

snippet pf "prototype.function"
${1:cl}.prototype.${2:fn} = function(${3:args}) {
	$0
};
endsnippet

global !p
def init_args(arg_string, indentation):
		indent = indentation + '  '
		args = arg_string.split(', ')
		vars = ['this.%s = %s;' % (var, var) for var in args if var]
		# first line already has proper indentation
		vars = [vars[0]] + [indent + var for var in vars[1:]]
		return '\n'.join(vars)
endglobal

snippet of "constructor function" !b
function ${1:class}(${2:args}) {
	var self = this;
	var cl   = $1;

	`!p snip.rv = init_args(t[2], snip._initial_indent)`
	$0
}
endsnippet

snippet r "return"
return $0;
endsnippet

snippet us "use strict" b
"use strict";

$0
endsnippet

snippet jsons "JSON.stringify" w
JSON.stringify(${1:obj}${2:, null, ${3:2}})
endsnippet


##############
#  arethusa  #
##############

snippet au "arethusaUtil" !w
arethusaUtil.$0
endsnippet

snippet aum "aretusaUtil.map" !w
arethusaUtil.map(${1:container}, function(el) {
	$0
});
endsnippet

snippet aui "arethusaUtil.inject" !w
arethusaUtil.inject(${1:obj}, ${2:container}, function(memo, ${3:args}) {
	$0
});
endsnippet

snippet aupa "arethusaUtil.pushAll" !w
arethusaUtil.pushAll(${1:target}, ${0:pusher});
endsnippet

snippet am "arethusa module"
"use strict";

angular.module('arethusa$1').$0
endsnippet

snippet acm "arethusa morph configuration"
"${1}" : {
	"long" : "$2",
	"short" : "$1",
	"postag" : "$3"${4:,
    "style" : {
    "color" : "$5"
  }}
}$0
endsnippet

snippet ar "arethusa relation configuration" !w
"${1}" : {
	"short" : "$1",
	"long" : "$2"
}$0
endsnippet

snippet arn "arethusa relation configuration with nesting" !w
"${1}" : {
	"short" : "$1",
	"long" : "$2",
	"nested" : {
		$0
	}
}
endsnippet

snippet aic "arethusa init captures" !b
keyCapture.initCaptures(function((kC) {
	return {
		${1:category}: [
			kC.create($0)
		]
	}
})
endsnippet


####################
#  arethusa-specs  #
####################


###############
#  AngularJS  #
###############

snippet t "$timeout" !b
$timeout(function() {
	$0
});
endsnippet

snippet s "$scope." w!
$scope.$0
endsnippet

snippet sf "$scope function" !
scope.${1:function_name} = function(${2:args}) {
	$0
};
endsnippet

snippet sv "$scope variable" !
scope.${1:var} = ${2:val};
endsnippet

snippet svc "$scope variable from constructor" !
scope.${1:var} = $1;
endsnippet

snippet sw "scope watch" w
scope.$watch('$1', $2);
endsnippet

snippet swl "scope watch long form" w
scope.$watch('${1:expression}', function(newVal, oldVal) {
	${2:if (newVal !== oldVal) {
		$3
	}}
	$0
});
endsnippet

snippet so "scope on" w
scope.$on('${1:expression}', function(${2:event}) {
	$0
});
endsnippet

snippet sod "scope on destroy" !b
scope.$on('$destroy', $0);
endsnippet

snippet sb "scope broadcast" w
scope.$broadcast('${1:event}', $0);
endsnippet

snippet se "scope emit" !w
scope.$emit('${1:event}', $0);
endsnippet

snippet rsb "rootScope broadcast" !w
$rootScope.$broadcast('${1:event}', $0);
endsnippet

snippet rse "rootScope emit" !w
$rootScope.$emit('${1:event}', $0);
endsnippet

snippet sa "scope apply" !b
scope.$apply($0);
endsnippet

snippet sa "scope apply with function" !b
function ${1:fn}() {
	$0
}

scope.$apply($1);
endsnippet

snippet ngbi "get angular element by id" !w
angular.element(document.getElementById(${0:id}));
endsnippet

snippet ngbind "bind function" !b
${1:element}.bind('${2:click}', function(${3:event}) {
	${4:scope.$apply(${5})}
});
endsnippet

snippet ngon "on function" !b
${1:element}.on('${2:click}', function(${3:event}) {
	${4:scope.$apply(${5})}
});
endsnippet


snippet ngfe "angular.forEach" !
angular.forEach(${1:var}, function(${2:value}, ${3:key}) {
	$0
});
endsnippet

snippet ngfes "angular.forEach short" !b
angular.forEach(${1:var}, ${0:fn});
endsnippet

snippet ngfesc "angular.forEach short with fn declaration" !b
function ${2:fn}(${3:value}, ${3:key}) {
	$0
}

angular.forEach(${1:var}, $2);
endsnippet

snippet ngfei "angular.forEach iterate function" !b
function ${3:fn}(${4:value}, ${4:key}) {
	$0
}

function $3s(${2:args}) {
	angular.forEach(${1:var}, $3);
}
endsnippet

snippet ngmfa "A factory in a module" w
factory('${1:factoryName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		return $0
	}
]);
endsnippet

snippet ngmc "Define an Angular Module Controller" w
controller('${1:serviceName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		$0
	}
]);
endsnippet

snippet ngms "Define an Angular Module Service" w
service('${1:serviceName}', function(${2:injectables}) {
	$0
});
endsnippet

snippet ngmsi "Define Angular directive with injectables" !w
service('${1:serviceName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		$0
	}
]);
endsnippet

snippet ngmfi "Define an Angular Module Filter" w
filter('${1:filterName}', function(${2:injectables}) {
	return function(input, ${3:args}) {
		$0
	};
})
endsnippet

snippet ngmd "Define an Angular Module Directive" w
directive('${1:directiveName}', function() {
	return {
		restrict: 'A',
		$0
	};
});
endsnippet

snippet ld "link definition" !b
link: linkFn$0
endsnippet

snippet cd "controller definition" !b
controller: controllerFn$0
endsnippet

snippet lfn "link function" !b
function linkFn(scope, el, attrs) {
	$0
};
endsnippet

snippet cfn "controller fn" !b
function controllerFn(${1:$scope}) {
	$0
};
endsnippet

snippet ca "controllerAs" !b
controllerAs: '${1:vm}'$0
endsnippet

snippet btc "bindToController" !b
bindToController: true$0
endsnippet

global !p

def injectables(inj, snip):
	strings = inj.split(', ')
	indent = snip._initial_indent + '  '
	result = ''.join(["%s'%s',\n" % (indent, string) for string in strings])
	snip.rv = result
endglobal


snippet ngmdi "Define Angular directive with injectables" !w
directive('${1:directiveName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		return {
			restrict: 'A',
			$0
		};
	}
]);
endsnippet

snippet ngmdil "Define Angular directive with injectables" !w
directive('${1:directiveName}', [
`!p injectables(t[2], snip)`  function(${2:injectables}) {
		return {
			restrict: '${3:A}',
			scope: ${4:true},
			link: function(scope, element, attrs) {
				$0
			},
			${5:templateUrl: 'templates/${6:path}.html'}
		};
	}
]);
endsnippet

snippet ngmdl "Angular directive with a link function" !w
directive('${1:directiveName}', function(${2:injectables}) {
	return {
		restrict: '${1:A}',
		link: function(scope, element, attrs) {
			$0
		}
	};
});
endsnippet

snippet ngds "Define an isolated scope in an Angular Directive" !b
scope: {
	$0
},
endsnippet

snippet ngdc "Define a controller inside an Angular Directive"
controller: function($scope, $element, $attrs${1}) {
	$2
},$0
endsnippet

snippet ngdl "Define a link function inside an Angular Directive"
link: function(scope, element, attrs) {
	$0
}
endsnippet

snippet ngea "Eval an elements attribute" b
scope.$eval(attrs.${0:attr});
endsnippet

snippet ngdr "Define restriction of an Angular Directive" !b
restrict: '${1:E}',
$0
endsnippet

snippet nglc "click event inside a link function" !b
element.bind('click', function(e) {
	$0
});
endsnippet


################
#  require.js  #
################

# tbd

############
#  jsHint  #
############

snippet hg "let jshint ignore a global variable" !b
/* global ${0:variable} */
endsnippet

#############
#  Jasmine  #
#############

snippet ajd "Arethusa directive spec with jasmine" !b
"use strict";

describe("${1:directiveName}", function() {
	var element, state, scope, parentScope;

	var template = '\
		${2}
	';

	beforeEach(function() {
		module("arethusa.core", function($provide) {
			$provide.value('configurator', arethusaMocks.configurator());
		});
	});

	function init(template, fn) {
		inject(function($compile, $rootScope, _state_) {
			state = _state_;
			state.replaceState(arethusaMocks.tokens());
			state.postInit();

			parentScope = $rootScope.$new();
			element = angular.element(template);

			if (angular.isFunction(fn)) fn();

			$compile(element)(parentScope);
			parentScope.$digest();

			// Change isolateScope() to scope() when needed
			scope = element.isolateScope();
		});
	}

	describe('general behavior', function() {
		beforeEach(function() {
			init(template);
		});

		${0}
	});
});
endsnippet

snippet ngj "angular jasmine file" !b
"use strict";

describe("${1:instance}", function() {
	beforeEach(module("${2:module}", function($provide) {
		$provide.${3:mock_injectables};
	}));

	describe("${4:function}", function() {
		${0:ait}
	});
});
endsnippet

snippet d "dump" !b
dump($0);
endsnippet

snippet desc "Describe block"
describe('${1:description}', function() {
	$0
});
endsnippet

snippet ait "Angular it block"
it('${1:description}', inject(function(${2:injectables}) {
	$0
}));
endsnippet

snippet abe "Angular before each"
beforeEach(module('${1:module}', function($provide) {
	$provide.value('${2:val}', ${3:obj})
}));
endsnippet

snippet ete "expect to equal" !b
expect(${1:actual}).toEqual(${0:expected});
endsnippet

snippet etb "expect to be" !b
expect(${1:actual}).toBe(${0:expected});
endsnippet

snippet ett "expect to be truthy" !b
expect(${1:actual}).toBeTruthy();
endsnippet

snippet etf "expect to be falsy" !b
expect(${1:actual}).toBeFalsy();
endsnippet

snippet etd "expect to be defined" !b
expect(${1:actual}).toBeDefined();
endsnippet

snippet etud "expect to be undefined" !b
expect(${1:actual}).toBeUndefined();
endsnippet

snippet etc "expect to contain" !b
expect(${1:actual}).toContain(${0:expected};
endsnippet

snippet ette "expect to throw error" !b
expect(function() {
	${1}
}).toThrow(new ${2:Error}(${3:"${4:message}"}));
endsnippet

####################
#  ngdoc snippets  #
####################

snippet dd "ngdoc directive" !b
/**
 * @ngdoc directive
 * @name ${1:arethusa.}${2}
 * @restrict ${3:A}
 *
 * @description
 * ${4:TODO}
 *
 */
endsnippet

snippet ds "ngdoc service" !b
/**
 * @ngdoc service
 * @name ${1:arethusa.}${2}
 *
 * @description
 * ${4:TODO}
 *
 */
endsnippet

snippet df "ngdoc function" !b
/**
 * @ngdoc function
 * @name arethusa.core.globalSettings#$1
 * @methodOf arethusa.core.globalSettings
 *
 * @description
 * ${2:TODO}
 */
endsnippet

snippet dp "ngdoc param" !w
@param {${1}} ${2:name} ${3:description}
endsnippet

snippet dprs "ngdoc property (short)" !w
@property {${1}} ${2:name} ${3:description}
endsnippet

snippet dpr "ngdoc property" !w
/**
 * @ngdoc property
 * @name $1
 * @propertyOf arethusa.core.globalSettings
 * @description
 * ${2:TODO}
 */
endsnippet

snippet dq "ngdoc requires" !w
@requires ${1:arethusa.core.}$2
endsnippet

snippet dr "ngdoc return" !w
@returns {${1}} ${2}
endsnippet

snippet dl "ngdoc link" !w
{@link ${1:arethusa.}${2}}
endsnippet

snippet daf "ngdoc function through arethusa-ngdocs-generator" !b
// @arethusa-function
endsnippet

snippet dap "ngdoc property through arethusa-ngdocs-generator" !b
// @arethusa-property
endsnippet

snippet dae "ngdoc event through arethusa-ngdocs-generator" !b
// @arethusa-event
endsnippet

########################
#  Small Improvements  #
########################

snippet siso "service" !b
sandbox.angular
	.module('si.$1.$2', [
		$3
	])
	.service('$2', $2);

function $2($4) {
	$0
}
endsnippet

snippet sido "directive" !b
sandbox.angular
	.module('si.$1.$2', [
		$3
	])
	.directive('$2', $2);

function $2($4) {
	return {
		restrict: 'AE',
		$0
	};
}
endsnippet

snippet sis "SI service" !b
module.exports = angular.module('si.$1.$2', [
	$4
]).service('$2', $2);

function $2($3) {
	$0
}
endsnippet

global !p
def template_name(snip):
	snip.rv = "%s%s" % (snip.basename, '-tpl.html')
endglobal

snippet sid "SI directive" !b
module.exports = angular.module('si.$1.$2', [
	$4
]).directive('$2', $2);

function $2($5) {
	return {
		restrict: 'AE',
		${6:template: require('./`!p template_name(snip)`'),}
		$0
	};
}
endsnippet

snippet re "require" !b
require('$1').name$0
endsnippet

snippet rer "require relative" !b
require('./$1').name$0
endsnippet

snippet soa "Store.on add" !b
${2:Name}Store.on(EVENTS.add, ${1:onAdd}$0);
endsnippet

snippet sou "Store.on update" !b
${2:Name}Store.on(EVENTS.update, ${1:onUpdate}$0);
endsnippet

snippet sor "Store.on remove" !b
${2:Name}Store.on(EVENTS.remove, ${1:onRemove}$0);
endsnippet

snippet sdc "dialog.confirm" !b
dialog.confirm({
	${1:template: require('$2')},
	scope: {$0}
});
endsnippet

snippet Tab_trigger "Description" !b

endsnippet

#####################
#  Lodash snippets  #
#####################


snippet _fe "_.forEach" !w
_.forEach($1, $2);
endsnippet

snippet _m "_.map" !w
_.map($1, $2);
endsnippet

snippet _p "_.pluck" !w
_.pluck($1, '$2');
endsnippet

snippet _c "_.contains" !w
_.contains($1, $2);
endsnippet

snippet _i "_.inject" !w
_.inject($1, $3, ${2:{}});
endsnippet

snippet _f "_.find" !w
_.find($1, $2);
endsnippet

snippet _fi "_.findIndex" !w
_.findIndex($1, $2);
endsnippet

snippet _F "_.filter" !w
_.filter($1, $2);
endsnippet


####################
#  React snippets  #
####################

snippet rcomp2 "Creates a components file" !b
'use strict';

import React from 'react';

const $1 = React.createClass({
	displayName: '$1',
	render() {
		return (
			$2
		);
	}
});

export default $1;
endsnippet

snippet irouter "import from react-router" !b
import { $1 } from 'react-router';

endsnippet

snippet iim "import from immutable" !b
import { $1 } from 'immutable';
endsnippet

snippet ic "import constans" !b
import { $1 } from '../../utils/constants';
endsnippet

snippet ia "import actions" !b
import { ACTIONS } from '../../utils/constants';
endsnippet

snippet ih "import helpers" !b
import helpers from '../../utils/helpers';
endsnippet

snippet comp "Creates a component" !b
import React from 'react';

class $1 extends React.Component {
	displayName: '$1'

	render() {
		return (
			$2
		);
	}
}

export default $1;
endsnippet

snippet rp "this.props"
this.props$0
endsnippet

snippet rs "this.state"
this.state$0
endsnippet

snippet rpt "React PropType" !b
PropTypes.$0
endsnippet

snippet Po "React PropTypes.object" !w
PropTypes.object$0
endsnippet

snippet Pf "React PropTypes.func" !w
PropTypes.func$0
endsnippet

snippet Pb "React PropTypes.bool" !w
PropTypes.bool$0
endsnippet

snippet Por "React PropTypes.object.isRequired" !w
PropTypes.object.isRequired$0
endsnippet

snippet Pfr "React PropTypes.func.isRequired" !w
PropTypes.func.isRequired$0
endsnippet

snippet Pbr "React PropTypes.bool.isRequired" !w
PropTypes.bool.isRequired$0
endsnippet

snippet c "A self closing component" !b
<$1 ${2:{ ...this.props }} $0/>
endsnippet

snippet pd "props deconstruct" !b
const { $0 } = this.props;
endsnippet

###########
#  Redux  #
###########

snippet rconst "redux constant" !b
export const $1 = '$1';
endsnippet

snippet rred "redux reduce" !b
function on$1(state, action) {
	return state;
}
endsnippet

snippet rreda "redux reduce async" !b
function on$1Begin(state, action) {
	return state;
}

function on$1Success(state, action) {
	return state;
}

function on$1Error(state, action) {
	return state;
}
endsnippet

snippet rcon "redux connect" !b
@connect((state) => $1)
endsnippet
# vim:ft=snippets:

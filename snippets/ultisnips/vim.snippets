###########################################################################
#                            SnipMate Snippets                            #
###########################################################################
snippet header
" File: ${1:`!v expand('%:t')`}
" Author: ${2:`!v g:snips_author`}
" Description: ${3}
${4:" Last Modified: `!v strftime("%B %d, %Y")`}

$0
endsnippet

snippet gvar "Global / configuration variable"
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard
if exists('g:loaded_${1:`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif

${3}

let g:loaded_$1 = 1
endsnippet

snippet f
function! ${1:function_name}(${2})
	${3}
endfunction
endsnippet

snippet dict "dictionary with proper indentation" !b
let ${1:var} = {
      \  $2 : $0,
\}
endsnippet


snippet for
for ${1} in ${2}
	${3}
endfor
endsnippet

snippet wh
while ${1}
	${2}
endwhile
endsnippet

snippet if
if ${1}
	${2}
endif
endsnippet

snippet ife
if ${1}
	${2}
else
	${3}
endif
endsnippet

snippet l
<leader>$0
endsnippet

# hopper plugin development

snippet fh "temporary mapping for hopper functions" !b
function! hopper#${1:function_name}(${2})
	${3}
endfunction
endsnippet

snippet hg "hopper#guard"
hopper#guard("${1:cmd}", "${0:message}")
endsnippet

snippet c "simulated ex mode call" w
:call $1<cr>$0)
endsnippet

# vim:ft=snippets:

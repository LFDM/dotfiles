"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General stuff                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""
"  Theme and colors  "
""""""""""""""""""""""

color railscasts

" Completion menu
hi Pmenu             ctermfg=253 ctermbg=NONE
hi PmenuSel          ctermfg=180 ctermbg=0
hi PmenuSbar                     ctermbg=242
set pumheight=20

hi SignColumn                    ctermbg=233
hi Vertsplit         ctermfg=238

" Not too important as we use vim-airline
hi TabLineFill       ctermfg=233
hi TabLine                       ctermbg=233
hi TabLineSel                    ctermbg=239

hi Visual                        ctermbg=236


"""""""""""""""""
"  set options  "
"""""""""""""""""

set noshowmode          " Mode is sufficiently shown by airline
set history=400
set ttimeoutlen=50      " Fast exit from insert mode
set scrolloff=3         " Always show some context
set sidescrolloff=5
set splitright          " Open to the right and below
set splitbelow          " even when using CtrlP splitters
set autoread            " Reread files when changed from the outside
set gdefault            " E.g. substitutions are multiple per line per default
set wildmenu            " get a little help. not properly colorized yet
set wildmode=longest:full,full
set wildignore+=*/doc/*,*.aux,*.dvi,*.out,*.toc,*.pdf,*.log   " latex stuff
set hidden              " Keep file in buffer after quit, remembers undo etc.
set nofoldenable        " Never fold


"""""""""""""""""
"  Good habits  "
"""""""""""""""""

" not needed anymore, I am converted
map   <Up>    <NOP>
map   <Down>  <NOP>
map   <Left>  <NOP>
map   <Right> <NOP>
imap  <Up>    <NOP>
imap  <Down>  <NOP>
imap  <Left>  <NOP>
imap  <Right> <NOP>


""""""""""""""""""""""""""""""""""
"  Key Remappings - Insert mode  "
""""""""""""""""""""""""""""""""""

" This is potentially dangerous but saves quite a few keystrokes for
" keys that are used heavily in programming.
"   ; is :
"   : is ;
"   / is _
"   \ is /
"   _ is \
" No shifting needed for _ : /
" \ is never used and moved away
"
" Toggle with the command ToggleCustomizedKeymap

let g:lfdm_custom_keymap = {
      \  ';' : ':',
      \  ':' : ';',
      \  '/' : '_',
      \  '_' : '\',
      \  '\' : '/',
      \}

function s:UseCustomKeymap()
  for [lhs, rhs] in items(g:lfdm_custom_keymap)
    exe 'inoremap '.lhs.' '.rhs
  endfor
  let g:lfdm_custom_keymap_in_use = 1
  echo "Using custom keymap"
endfunction

function s:UseNormalKeymap()
  for lhs in keys(g:lfdm_custom_keymap)
    exe 'iunmap '.lhs
  endfor
  let g:lfdm_custom_keymap_in_use = 0
  echo "Using normal keymap"
endfunction

function s:ToggleCustomizedKeymap()
  if g:lfdm_custom_keymap_in_use
    call s:UseNormalKeymap()
  else
    call s:UseCustomKeymap()
  endif
endfunction
command! ToggleCustomizedKeymap call s:ToggleCustomizedKeymap()

function! ToggleCustomizedKeymapFromInsertMode()
  let g:lfdm_custom_keymap_toggled = 1
  ToggleCustomizedKeymap
endfunction

function! s:RestoreKeymapToggling()
  if g:lfdm_custom_keymap_toggled
    ToggleCustomizedKeymap
    let g:lfdm_custom_keymap_toggled = 0
  endif
endfunction

let g:lfdm_custom_keymap_toggled = 0

au InsertLeave * call s:RestoreKeymapToggling()

silent call s:UseCustomKeymap()

map ,ck :ToggleCustomizedKeymap<cr>
inoremap ,ck <c-o>:call ToggleCustomizedKeymapFromInsertMode()<cr>


""""""""""""""""""""""""
"  Insert mode helper  "
""""""""""""""""""""""""

" upcase the word just written - useful for constants
" we don't use <C-c> to exit insert mode anyway
inoremap <C-c> <esc>viwUea


"""""""""""""""""""""""""""""""""""
"  Key Remappings - Normal mode   "
"""""""""""""""""""""""""""""""""""

" jumping in f command or similar
noremap , ;
noremap \ ,


"""""""""""""""""""""
"  Typo Prevention  "
"""""""""""""""""""""

command! Q q

" don't want to lookup stuff by accident
map K <Nop>


"""""""""""""""""""
"  Abbreviations  "
"""""""""""""""""""

function! Abbrs()
  ab c Caesar
  ab bg Bellum Gallicum
  ab cbg Caes. Gall.
  ab tb Treebank
endfunction
autocmd BufRead,BufNewFile ~/code/diploma_thesis/text/tex/*.tex call Abbrs()


""""""""""""""""""""""""""""
"  Tabs, Buffers, Windows  "
""""""""""""""""""""""""""""

noremap  <C-t> :tabnew<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-h> :tabprevious<CR>

nnoremap vv <c-w>v
nnoremap ss <c-w>s

"Switch windows faster
map <space> <c-w>w

nnoremap <leader>bd :bd<cr>


""""""""""""""
"  Sessions  "
""""""""""""""

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
map <leader>ms :mksession! ~/session.vim
map <leader>ls :so ~/session.vim


"""""""""""""""""""""""""
"  Saving and quitting  "
"""""""""""""""""""""""""
map <leader>w  :w<cr>
map <leader>wa :wa<cr>
map <leader>x  :x<cr>
map <leader>qq :q<cr>


""""""""""""""
"  Movement  "
""""""""""""""

" H and L for start and end of line
noremap H ^
noremap L $

" Move over graphical lines, i.e. when they are wrapped
noremap j gj
noremap k gk

" Visual shifting - vmode is not exited
vnoremap < <gv
vnoremap > >gv

" go to last edit
nnoremap ,. '.

SubmodeDefine speedjumping
Submode vn <enter> sj 5j
Submode vn <enter> sk 5k
Submode vn j 5j
Submode vn J 10j
Submode vn k 5k
Submode vn K 10k
SubmodeDefineEnd


""""""""""""""""""""""""""""
"  Centering search jumps  "
""""""""""""""""""""""""""""
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz


""""""""""""""""""""
"  Copy and Paste  "
""""""""""""""""""""

" uses paste mode when pasting from the clipboard in insert mode
" and leaves it immeadiately after
inoremap <C-v> <esc>:set paste<cr>a<C-r>+<esc>:set nopaste<cr>a
inoremap <C-b> <esc>:set paste<cr>a<C-r>*<esc>:set nopaste<cr>a

" copy current paste buffer to clipboard buffer
" remember that a visual selection is automatically in @*
noremap <C-c> :let @+=@"<cr> :echo 'Copied default paste buffer to clipboard.'<cr>

" Y like D, C...
map Y y$


"""""""""""
"  Marks  "
"""""""""""

" swaps for easier mark navigation
" ` jumps directly to the mark
nnoremap ' `
nnoremap ` '


""""""""""""""""""
"  Highlighting  "
""""""""""""""""""

" Overlong lines. Don't do it  in the quickfix windows.
" Hacky, but vimscript is driving one mad sometimes...
au BufRead * highlight OverLength ctermbg=238
au BufRead * match OverLength /\%80v.\+/
au BufReadPost quickfix exec ':call clearmatches()'

" Disables highlighting
map <esc><esc> :nohl<cr>


"""""""""""""""""""""""""
"  Whitespace deletion  "
"""""""""""""""""""""""""

" should be enabled for others too
au BufWritePre *.rb :%s/\s\+$//e


""""""""""""""""""""""
"  Filetype setting  "
""""""""""""""""""""""

au BufRead,BufNewFile *.hamlc set ft=haml
au BufRead,BufNewFile *pryrc set ft=ruby
au BufRead,BufNewFile *.zsh-theme set ft=zsh


"""""""""""""""""""
"  Spellchecking  "
"""""""""""""""""""

au Filetype gitcommit setlocal spell spelllang=en
au Filetype markdown setlocal spell spelllang=en


"""""""""""""""""""
"  File renaming  "
"""""""""""""""""""

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>` :call RenameFile()<cr>




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       Language specific stuff                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""
"  Ruby "
"""""""""

" see also vimrc.before for blockle


" Insert pry statement
" Mind that ; is remapped - we have to shield it with paste mode
map <leader>p :set paste<cr>orequire 'pry'; binding.pry<esc>:set nopaste<cr>
map <leader>P :set paste<cr>Orequire 'pry'; binding.pry<esc>:set nopaste<cr>

" Usually set to rspec, but we run rake instead and try to send it off to the
" rake-runner window in tmux
" Also saves the buffer before invoking rake
function! RakeThroughTmux()
  " making sure that we are in the correct directory before invoking rake
  exec 'w'
  exec 'silent ! tmux send-keys -t home:rake-runner "cd ' . expand('%:p:h') . ' && rake" C-m'
  exec 'redraw!'
endfunction
map <leader>r :call RakeThroughTmux()<cr>

" Ruby String to Symbol. makes use of the Surround plugin.
" Mind the remap ; to :
map <leader><leader>s ds"i;<esc>

" Opens a split window with the corresponding spec file of what you're currently working on
function! OpenSpec()
  let spec_file = substitute(expand('%'), ".rb$", "_spec.rb", "")
  exec ":vs"
  exec ":wincmd l"
  exec ":e spec/" . spec_file
endfunction
map <leader>k :call OpenSpec()<cr>

" Focus the RSpec do block you're currently hovering and saves the file
function! RSpecFocus()
  if getline(".") =~ ', :focus'
    exec ":silent! s/, :focus//g"
  else
    exec ":silent! s/ do/, :focus do"
  endif
  exec ":w"
endfunction
map <leader>j :call RSpecFocus()<Cr>

" Change Ruby 1.8 style hashes to new syntax - asks for confirmation
" Not terribly well done for now
function! MorphHash()
  exec ":'<,'>:s/:\([^ ]*\)\(\s*\)=>/\1:/gc"
endfunction


"""""""""""""""
"  LLT stuff  "
"""""""""""""""

" Change current directory to the llt path of the current file
function! SetLLTPath()
  exec ':lcd ' . matchlist(expand("%:p"), '\v.*llt-.{-}/')[0]
endfunction
map <leader>lt :call SetLLTPath()<Cr>


""""""""""""
"  Python  "
""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          Plugin customization                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""
"  Syntastic  "
"""""""""""""""

" Disables buggy checks for bats files
let g:syntastic_ignore_files = ['\.bats$']
" Automatically show error list
let g:syntastic_auto_loc_list=1
" Make the list a little shorter
let g:syntastic_loc_list_height=5


"""""""""""""""""""
"  YouCompleteMe  "
"""""""""""""""""""

" see also vimrc.before

let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_use_bundler = 1
let g:rubycomplete_rails = 1

" Eclim - used by YouCompleteMe
" Currently unused, not really working and an expensive dependency
" let g:EclimCompletionMethod = 'omnifunc'


"""""""""""""""
"  UltiSnips  "
"""""""""""""""

" see also vimrc.before

let g:UltiSnipsEditSplit = 'vertical'
map <leader>ue :call UltiSnipsEdit()<cr>
" expand the snippet in current selection
smap <C-l> <esc>a<c-j>
smap <C-x> <bs><esc>:call CleanUpSnippetRemainings()<cr>
"imap <C-b> <c-j><esc>"_dd " this is acting up a bit, would be useful for the
"creator plugins

function! CleanUpSnippetRemainings()
  while getline('.') =~ '^\s*$'
    delete
    call cursor(line('.') - 1, 0)
  endwhile
endfunction


"""""""""""""""""""
"  NerdCommenter  "
"""""""""""""""""""

" comment a whole paragraph
map <leader>cp vip<leader>c<space>


""""""""""""""
"  NerdTree  "
""""""""""""""

let NERDTreeMinimalUI = 1
let NERDTreeWinSize = 30
let NERDTreeShowHidden = 1


""""""""""""""
"  Surround  "
""""""""""""""

let g:surround_35  = "#{\r}"   " ruby interpolation triggered by #

" Quickly surround the inner word by triggering
" , and the surrounder.
" When triggered from normal mode, jump to the later surrounder

map ,# ysiw#2w
vmap ,# c#{<C-R>"}<ESC>

map ," ysiw"2w
vmap ," c"<C-R>""<ESC>

map ,' ysiw'2w
vmap ,' c'<C-R>"'<ESC>

map ,( ysiw(2w
map ,) ysiw)2w
vmap ,( c( <C-R>" )<ESC>
vmap ,) c(<C-R>")<ESC>

map ,] ysiw]2w
map ,[ ysiw[2w
vmap ,[ c[ <C-R>" ]<ESC>
vmap ,] c[<C-R>"]<ESC>

map ,} ysiw}2w
map ,{ ysiw{2w
vmap ,} c{ <C-R>" }<ESC>
vmap ,{ c{<C-R>"}<ESC>

map ,` ysiw`2w
vmap ,` c`<C-R>"`<ESC>


""""""""""""
"  switch  "
""""""""""""

" switch_custom_def_helper
let scdh =
      \{
      \  'class_module': ['class', 'module'],
      \  'any_empty': ['any', 'empty'],
      \  'if_unless': ['if', 'unless'],
      \  'ternary_args': {
      \     '\v^(.*) \? (.*) : (.*)': '\1 ? \3 : \2'
      \  },
      \  'should': {
      \    '\v^(.*)should ': '\1should_not ',
      \    '\v^(.*)should_not ': '\1should ',
      \  },
      \}

au Filetype ruby let b:switch_custom_definitions =
      \[
      \  scdh['class_module'],
      \  scdh['any_empty'],
      \  scdh['if_unless'],
      \  scdh['ternary_args'],
      \  scdh['should'],
      \]

nnoremap - :Switch<cr>


"""""""""""""""
"  splitjoin  "
"""""""""""""""
nnoremap ,j :SplitjoinJoin<cr>
nnoremap ,s :SplitjoinSplit<cr>


""""""""""""""
"  sideways  "
""""""""""""""

SubmodeDefine sideways
Submode n <enter> sf <nop>
Submode n h :SidewaysJumpLeft<cr>
Submode n k :SidewaysJumpLeft<cr>
Submode n j :SidewaysJumpRight<cr>
Submode n l :SidewaysJumpRight<cr>
Submode n H :SidewaysLeft<cr>
Submode n K :SidewaysLeft<cr>
Submode n L :SidewaysRight<cr>
Submode n J :SidewaysRight<cr>
SubmodeDefineEnd
call submode#map('sideways', 'n', 'rs', 'd', 'd<Plug>SidewaysArgumentTextobjA')
call submode#map('sideways', 'n', 'rs', 'x', 'd<Plug>SidewaysArgumentTextobjI')

"""""""""""""
"  submode  "
"""""""""""""

" stay - we entered for a cause
let g:submode_timeoutlen = 5000


"""""""""""""""""
"  delimitMate  "
"""""""""""""""""

" jumping over the auto-inserted closer
imap <C-a> <esc>wa


""""""""""""
"  Tagbar  "
""""""""""""

let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
              \ 'h:Heading_L1',
              \ 'i:Heading_L2',
              \ 'k:Heading_L3',
              \ 'r:Heading_L4'
      \ ]
\ }

let g:tagbar_type_snippets = {
      \ 'ctagstype' : 'snippets',
      \ 'kinds' : [
              \ 's:snippets',
              \ 'g:globals',
      \ ]
\ }


"""""""""""""""
"  IndentLine  "
"""""""""""""""

let g:indentLine_color_term = 235
let g:indentLine_char = '|'
map <leader>ig :IndentLinesToggle<cr>


"""""""""""""""""""
"  number_toggle  "
"""""""""""""""""""

" Enables the only recently supported hybrid mode for line numbers.
" Overrides the built in function
function! EnableRelativeNumbers()
  set number
  set relativenumber
endfunction


"""""""""""
"  Gundo  "
"""""""""""

let g:gundo_right = 1


""""""""""""""
"  Fugitive  "
""""""""""""""

" stages file in current buffer
map <leader>ga :Gwrite<cr>


""""""""""""""
"  Startify  "
""""""""""""""

function! VimVersion()
  return split(system('vim --version | head -2'), '\n')
endfunction
let g:startify_custom_header = VimVersion() + [ '' ]
let g:startify_skiplist = [ 'COMMIT_EDITMSG', '.git/index']
let g:startify_change_to_dir = 0


"""""""""""""
"  Ack.vim  "
"""""""""""""

" much faster when using ag
let g:ackprg = 'ag --nocolor --nogroup --column'

" auto-quote
map <leader>fa :Ack ""<left>


"""""""""""
"  CtrlP  "
"""""""""""

noremap <C-\> :CtrlPTag<cr>

let g:ctrlp_user_command = 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'

" no caching needed, ag is so absurdely fast
let g:ctrlp_use_caching = 0

" reopens a file even when already open somewhere
let g:ctrlp_switch_buffer = 0

" no new window directly on startified startup
let g:ctrlp_reuse_window = 'startify'

""""""""""""""""
"  EasyMotion  "
""""""""""""""""

" I need to use it more, so here are easier mappings
map <leader>a <leader><leader>f
map <leader><esc> <leader><leader>F


""""""""""""""""
"  Tabularize  "
""""""""""""""""

" align + delimiter
map <leader>t= :Tabularize /=<cr>
map <leader>th :Tabularize / => <cr>
map <leader>t: :Tabularize /:<cr>
map <leader>t. :Tabularize /.<cr>
map <leader>tt :Tabularize /then<cr>
map <leader>tc :Tabularize /


""""""""""""""""""""""""
"  RainbowParentheses  "
""""""""""""""""""""""""

map <leader>rp :RainbowParenthesesToggle<cr>
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


""""""""""
"  Gist  "
""""""""""

" Open Browser after gisting
" not really working right now
let g:gist_open_browser_after_post = 1


"""""""""""""
"  Airline  "
"""""""""""""

" see also vimrc.before


"""""""""""""""
"  vim-latex  "
"""""""""""""""

" see also vimrc.before

let g:Tex_SmartKeyQuote=0
let g:tex_flavor='latex'

function! Wrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction
au Filetype tex call Wrapping()

function! TexRel()
  exec 'silent !pdflatex main && xdg-open main.pdf'
  redraw!
endfunction
map <leader>tr :call TexRel()<cr>


""""""""""""""""""""
"  vimrc handling  "
""""""""""""""""""""

" Opens this file in a new tab
function! Vimrc()
  exec 'tabe ~/.vimrc.after'
endfunction
map <leader><leader>v :call Vimrc()<cr>

" Source this file when it's saved
au BufWritePost .vimrc.after source ~/.vimrc.after

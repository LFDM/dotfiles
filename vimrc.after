"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General stuff                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""
"  Theme and colors  "
""""""""""""""""""""""

"color vibrantink
"color ir_black
color railscasts

" Completion menu
hi Pmenu ctermfg=253 ctermbg=NONE
hi PmenuSel ctermfg=180 ctermbg=0
hi PmenuSbar ctermbg=242
set pumheight=20

hi SignColumn ctermbg=233
hi Vertsplit ctermfg=238

" Not too important as we use vim-airline
hi TabLineFill ctermfg=233
hi TabLine ctermbg=233
hi TabLineSel ctermbg=239


"""""""""""""""""
"  set options  "
"""""""""""""""""

" Mode is sufficiently shown by airline
set noshowmode

set history=400

" Fast exit from insert mode
set ttimeoutlen=50

" Always show some context
set scrolloff=3
set sidescrolloff=5

" Open to the right and below, even if using CtrlP splitters
set splitright
set splitbelow

" Reread files when changed from the outside (e.g. you just made a git pull)
set autoread

" E.g. substitutions are multiple per line per default
set gdefault

set wildignore+=*/doc/*,*.aux,*.dvi,*.out,*.toc,*.pdf,*.log

" Keeps file in buffer even after quitting, will remember undo history e.g.
set hidden

" never fold
set nofoldenable


"""""""""""""""""
"  Good habits  "
"""""""""""""""""

" not needed anymore, I am converted
map   <Up>    <NOP>
map   <Down>  <NOP>
map   <Left>  <NOP>
map   <Right> <NOP>
imap  <Up>    <NOP>
imap  <Down>  <NOP>
imap  <Left>  <NOP>
imap  <Right> <NOP>


""""""""""""""""""""""""""""""""""
"  Key Remappings - Insert mode  "
""""""""""""""""""""""""""""""""""

" This is potentially dangerous but saves quite a few keystrokes
" Swaps the following keys:
"   ; and :
"   / and _
"   \ and |

inoremap ; :
inoremap : ;
inoremap / _
inoremap _ /
inoremap \ \|
inoremap \| \


""""""""""""""""""""""""
"  Insert mode helper  "
""""""""""""""""""""""""

" upcase the word just written - useful for constants
" we don't use <C-c> to exit insert mode anyway
inoremap <C-c> <esc>viwUea


"""""""""""""""""""""""""""""""""""
"  Key Remappings - Normal mode   "
"""""""""""""""""""""""""""""""""""

" jumping in f command or similar
noremap , ;
noremap \ ,


"""""""""""""""""""
"  Abbreviations  "
"""""""""""""""""""

function! Abbrs()
  ab c Caesar
  ab bg Bellum Gallicum
  ab cbg Caes. Gall.
  ab tb Treebank
endfunction
autocmd BufRead,BufNewFile ~/code/diploma_thesis/text/tex/*.tex call Abbrs()


""""""""""""""""""""""
"  Tabs and Windows  "
""""""""""""""""""""""
noremap  <C-t> :tabnew<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-h> :tabprevious<CR>

nnoremap vv <c-w>v " opens vertical split
nnoremap ss <c-s>s " opens horizontal split



" invoke sort on a visual selection of text
map <leader>so :sort<cr>

" Insert pry statement
" Mind that ; is remapped - we have to shield it with paste mode
map <leader>p :set paste<cr>orequire 'pry'; binding.pry<esc>:set nopaste<cr>
map <leader>P :set paste<cr>Orequire 'pry'; binding.pry<esc>:set nopaste<cr>

" Disable K - looking up uninteresting stuff
map K <Nop>

" a common typo... :Q to :q
command! Q q


""""""""""""""
"  Sessions  "
""""""""""""""

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
map <leader>ms :mksession! ~/session.vim
map <leader>ls :so ~/session.vim


"""""""""""""""""""""""""
"  Saving and quitting  "
"""""""""""""""""""""""""
map <leader>w  :w<cr>
map <leader>wa :wa<cr>
map <leader>x  :x<cr>
map <leader>qq :q<cr>


""""""""""""""""""""""""""""
"  Centering search jumps  "
""""""""""""""""""""""""""""
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz


" uses paste mode when pasting from the clipboard in insert mode
" and leaves it immeadiately after
inoremap <C-v> <esc>:set paste<cr>a<C-r>+<esc>:set nopaste<cr>a
inoremap <C-b> <esc>:set paste<cr>a<C-r>*<esc>:set nopaste<cr>a

" copy current paste buffer to clipboard buffer
" remember that a visual selection is automatically in @*
noremap <C-c> :let @+=@"<cr> :echo 'Copied default paste buffer to clipboard.'<cr>

" Y like D, C...
map Y y$

" H and L for start and end of line
noremap H ^
noremap L $

" Move over graphical lines, i.e. when they are wrapped
noremap j gj
noremap k gk

" Disables highlighting
map <esc><esc> :nohl<cr>

"Switch windows faster
map <space> <c-w>w

" Visual shifting - vmode is not exited
vnoremap < <gv
vnoremap > >gv


"""""""""""
"  Marks  "
"""""""""""

" swaps for easier mark navigation
" ` jumps directly to the mark
nnoremap ' `
nnoremap ` '


"""""""""""""""""""""""""""""""""
"  Highlighting too long lines  "
"""""""""""""""""""""""""""""""""

" Don't do it  in the quickfix windows.
" Hacky, but vimscript is driving one mad sometimes...
au BufRead * highlight OverLength ctermbg=darkgrey guibg=#592929
au BufRead * match OverLength /\%80v.\+/
au BufReadPost quickfix exec ':call clearmatches()'


"""""""""""""""""""""""
"  Whitespace delete  "
"""""""""""""""""""""""

" should be enabled for others too
au BufWritePre *.rb :%s/\s\+$//e


""""""""""""""""""""""
"  Filetype setting  "
""""""""""""""""""""""

au BufRead,BufNewFile *.hamlc set ft=haml
au BufRead,BufNewFile *pryrc set ft=ruby
au BufRead,BufNewFile *.zsh-theme set ft=zsh


"""""""""""""""""""
"  spellchecking  "
"""""""""""""""""""

au Filetype gitcommit setlocal spell spelllang=en
au Filetype markdown setlocal spell spelllang=en


"""""""""""""""""""
"  File renaming  "
"""""""""""""""""""

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>` :call RenameFile()<cr>




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       Language specific stuff                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""
"  Ruby "
"""""""""

" Usually set to rspec, but we run rake instead and try to send it off to the
" rake-runner window in tmux
function! RakeThroughTmux()
  " making sure that we are in the correct directory before invoking rake
  exec 'silent ! tmux send-keys -t home:rake-runner "cd ' . expand('%:p:h') . ' && rake" C-m'
  exec 'redraw!'
endfunction
map <leader>r :call RakeThroughTmux()<cr>

" Ruby String to Symbol. makes use of the Surround plugin.
" Mind the remap ; to :
map <leader><leader>s ds"i;<esc>

" converts a ruby block with {} to a do/end block
" place the cursor on the end of the newly created line as there might be a
" trailing whitespace left
map <leader><leader>d f{%s<cr>end<esc>k^f{sdo<esc>f\|,a<cr><esc>j=k$

" Opens a split window with the corresponding spec file of what you're currently working on
function! OpenSpec()
  let spec_file = substitute(expand('%'), ".rb$", "_spec.rb", "")
  exec ":vs"
  exec ":wincmd l"
  exec ":e spec/" . spec_file
endfunction
map <leader>k :call OpenSpec()<cr>

" Focus the RSpec do block you're currently hovering and saves the file
function! RSpecFocus()
  if getline(".") =~ ', :focus'
    exec ":silent! s/, :focus//g"
  else
    exec ":silent! s/ do/, :focus do"
  endif
  exec ":w"
endfunction
map <leader>j :call RSpecFocus()<Cr>

" Change Ruby 1.8 style hashes to new syntax - asks for confirmation
" Not terribly well done for now
function! MorphHash()
  exec ":'<,'>:s/:\([^ ]*\)\(\s*\)=>/\1:/gc"
endfunction


"""""""""""""""
"  LLT stuff  "
"""""""""""""""

" Change current directory to the llt path of the current file
function! SetLLTPath()
  exec ':lcd ' . matchlist(expand("%:p"), '\v.*llt-.{-}/')[0]
endfunction
map <leader>lt :call SetLLTPath()<Cr>


""""""""""""
"  Python  "
""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          Plugin customization                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""
"  Syntastic  "
"""""""""""""""

" Disables buggy checks for bats files
let g:syntastic_ignore_files = ['\.bats$']
" Automatically show error list
let g:syntastic_auto_loc_list=1
" Make the list a little shorter
let g:syntastic_loc_list_height=5


"""""""""""""""""""
"  YouCompleteMe  "
"""""""""""""""""""

let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_use_bundler = 1
let g:rubycomplete_rails = 1

" Eclim - used by YouCompleteMe
" Currently unused, not really working and an expensive dependency
" let g:EclimCompletionMethod = 'omnifunc'


"""""""""""""""
"  UltiSnips  "
"""""""""""""""

let g:UltiSnipsEditSplit = 'vertical'
map <leader>ue :call UltiSnipsEdit()<cr>
" the UltiSnips fork disables select mode in snippets.
" It is replaced with a change call, that yank the visual
" selection to register u. The mapping will insert the
" placeholder back in and jump forward.
" Note that leaving and entering insert mode after the insertion
" is another primitive hack. This avoids a race condition, where the
" jump forward happens so fast, that the jump position hasn't been
" updated by the insertion in time. The slight delay makes it right.
imap <C-l> <C-r>u<esc>a<C-j>


"""""""""""""""
"  IndentLine  "
"""""""""""""""

let g:indentLine_color_term = 235
let g:indentLine_char = '|'
map <leader>il :IndentLinesToggle<cr>


"""""""""""""""""""
"  number_toggle  "
"""""""""""""""""""

" Enables the only recently supported hybrid mode for line numbers.
" Overrides the built in function
function! EnableRelativeNumbers()
  set number
  set relativenumber
endfunction


""""""""""""""
"  Fugitive  "
""""""""""""""

" stages file in current buffer
map <leader>ga :Gwrite<cr>


""""""""""""""
"  Startify  "
""""""""""""""

function! VimVersion()
  return split(system('vim --version | head -2'), '\n')
endfunction
let g:startify_custom_header= VimVersion() + [ '' ]
let g:startify_skiplist = [ 'COMMIT_EDITMSG', '.git/index']


"""""""""""
"  CtrlP  "
"""""""""""

noremap <C-\> :CtrlPTag<cr>


""""""""""""""""
"  Tabularize  "
""""""""""""""""

" align + delimiter
map <leader>a= :Tabularize /=<cr>
map <leader>a: :Tabularize /:<cr>
map <leader>a. :Tabularize /.<cr>
map <leader>at :Tabularize /then<cr>
map <leader>ac :Tabularize /


""""""""""""""""""""""""
"  RainbowParentheses  "
""""""""""""""""""""""""

map <leader>rp :RainbowParenthesesToggle<cr>
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


""""""""""
"  Gist  "
""""""""""

" Open Browser after gisting
" not really working right now
let g:gist_open_browser_after_post = 1


"""""""""
"  Ack  "
"""""""""

" usual mapping is <leader>f, which causes an unwanted timeout
map <leader>fa :Ack<space>


"""""""""""
"  Latex  "
"""""""""""

let g:Tex_SmartKeyQuote=0
let g:tex_flavor='latex'

function! Wrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction
au Filetype tex call Wrapping()

function! TexRel()
  exec 'silent !pdflatex main && xdg-open main.pdf'
  redraw!
endfunction
map <leader>tr :call TexRel()<cr>


""""""""""""""""""""
"  vimrc handling  "
""""""""""""""""""""

" Opens this file in a new tab
function! Vimrc()
  exec 'tabe ~/.vimrc.after'
endfunction
map <leader><leader>v :call Vimrc()<cr>

" Source this file when it's saved
au BufWritePost .vimrc.after source ~/.vimrc.after

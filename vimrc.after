color vibrantink
color ir_black
color railscasts

" Darker sign column, approx same color as background
hi SignColumn ctermbg=233

set history=400

" Always show some context
set scrolloff=3
set sidescrolloff=5

" Open to the right and below, even if using CtrlP splitters
set splitright
set splitbelow

" Reread files when changed from the outside (e.g. you just made a git pull)
set autoread

" E.g. substitutions are multiple per line per default
set gdefault

set wildignore+=*/doc/*,*.aux,*.dvi,*.out,*.toc,*.pdf,*.log

" Keeps file in buffer even after quitting, will remember undo history e.g.
set hidden

" never fold
set nofoldenable

" Forcing good habits
map   <Up>    <NOP>
map   <Down>  <NOP>
map   <Left>  <NOP>
map   <Right> <NOP>
imap  <Up>    <NOP>
imap  <Down>  <NOP>
imap  <Left>  <NOP>
imap  <Right> <NOP>


" Less shift keys in insert mode with a customized qwerty?
inoremap ; :
inoremap : ;
inoremap / _
inoremap _ /
inoremap \ \|
inoremap \| \

" short and long vowel replacements
map <leader>aa ră
map <leader>ee rĕ
map <leader>ii rĭ
map <leader>oo rŏ
map <leader>uu rŭ
map <leader>yy rў
map <leader>aaa rā
map <leader>eee rē
map <leader>iii rī
map <leader>ooo rō
map <leader>uuu rū
map <leader>yyy rȳ

function Abbrs()
  ab c Caesar
  ab bg Bellum Gallicum
  ab cbg Caes. Gall.
  ab tb Treebank
endfunction
autocmd BufRead,BufNewFile ~/code/diploma_thesis/text/tex/*.tex call Abbrs()

" Tabs
noremap  <C-t> :tabnew<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-h> :tabprevious<CR>

" Switch , and ;
noremap , ;
noremap \ ,

" invoke sort on a visual selection of text
map <leader>so :sort<cr>

" Insert pry statement
" Mind that : is remapped - looks honky but only works this way
map <leader>p orequire 'pry': binding.pry<esc>
map <leader>P Orequire 'pry': binding.pry<esc>

" Disable K - looking up uninteresting stuff
map K <Nop>

" a common typo... :Q to :q
command! Q q

" Session handling
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
map <leader>ms :mksession! ~/session.vim
map <leader>ls :so ~/session.vim

" Usually set to rspec, but we run rake instead and try to send it off to the
" rake-runner window in tmux
function RakeThroughTmux()
  exec 'silent ! tmux send-keys -t home:rake-runner "cd ' . expand('%:p:h') . '" C-m'
  exec 'silent ! tmux send-keys -t home:rake-runner "rake" C-m'
  exec 'redraw!'
endfunction

map <leader>r :call RakeThroughTmux()<cr>

" Faster saving of files
map <leader>w  :w<cr>
map <leader>wa :wa<cr>
map <leader>x  :x<cr>
map <leader>qq :q<cr>

" Searches always in the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Y like D, C...
map Y y$

" H and L for start and end of line
noremap H ^
noremap L $

" Move over graphical lines, i.e. when they are wrapped
noremap j gj
noremap k gk

" Disables highlighting
map <esc><esc> :nohl<cr>

"Map <Space> to / (search)
"map <space> /
"Switch windows with QWERTY
map <space> <c-w>w

" Visual shifting - vmode is not exited
vnoremap < <gv
vnoremap > >gv

" Marks
map <leader>mm `m
map <leader>mn `n

" converts a ruby block with {} to a do/end block
" place the cursor on the end of the newly created line as there might be a
" trailing whitespace left
map <leader><leader>d f{%s<cr>end<esc>k^f{sdo<esc>f\|,a<cr><esc>j=k$

" Ruby String to Symbol. makes use of the Surround plugin.
map <leader><leader>s ds"i:<esc>

" Highlight long lines, but not in the quickfix windows.
" Hacky, but vimscript is driving one mad sometimes...
au BufRead * highlight OverLength ctermbg=darkgrey guibg=#592929
au BufRead * match OverLength /\%80v.\+/
au BufReadPost quickfix exec ':call clearmatches()'

" Proper syntax highlighting for hamlc files
au BufRead,BufNewFile *.hamlc set ft=haml
au BufRead,BufNewFile .pryrc set ft=ruby

" Remove trailing whitespace on save for ruby files
au BufWritePre *.rb :%s/\s\+$//e

"""""""""""""
"  Plugins  "
"""""""""""""

" Automatically show error list
let g:syntastic_auto_loc_list=1
" Make the list a little shorter
let g:syntastic_loc_list_height=5

" open CtrlPTag
noremap <C-\> :CtrlPTag<cr>

" align + delimiter
map <leader>a= :Tabularize /=<cr>
map <leader>a: :Tabularize /:<cr>
map <leader>a. :Tabularize /.<cr>
map <leader>at :Tabularize /then<cr>
map <leader>ac :Tabularize /

" Rainbow Parentheses
map <leader>rp :RainbowParenthesesToggle<cr>
" and show all kinds of parens
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Gist
" Open Browser after gisting
let g:gist_open_browser_after_post = 1

" VimWiki
" Disabled for good in vimrc.before atm

" disable the annoying leader mapping
"map <leader>ww <nop>

"" use markdown syntax
"let g:vimwiki_list = [{'path': '~/vimwiki/',
                     "\ 'syntax': 'markdown', 'ext': '.md'}]
"augroup filetypedetect
  ""au! BufRead,BufNewFile */vimwiki/*        set filetype=vimwiki
"augroup END

" Ack
" usual mapping is <leader>f, which causes an unwanted timeout
map <leader>fa :Ack<space>

" Latex
let g:Tex_SmartKeyQuote=0
let g:tex_flavor='latex'

function! Wrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction
au Filetype tex call Wrapping()

" Spellchecking
au Filetype gitcommit setlocal spell spelllang=en
au Filetype markdown setlocal spell spelllang=en


" Functions "
"""""""""""""

" Change Ruby 1.8 style hashes to new syntax - asks for confirmation
function! MorphHash()
  exec ":'<,'>:s/:\([^ ]*\)\(\s*\)=>/\1:/gc"
endfunction

" Change current directory to the llt path of the current file
function! SetLLTPath()
  exec ':lcd ' . matchlist(expand("%:p"), '\v.*llt-.{-}/')[0]
endfunction
map <leader>lt :call SetLLTPath()<Cr>

" Focus the RSpec do block your currently hovering and saves the file
function! RSpecFocus()
if getline(".") =~ ', :focus'
  exec ":silent! s/, :focus//g"
  else
  exec ":silent! s/ do/, :focus do"
  endif
  exec ":w"
endfunction
map <leader>j :call RSpecFocus()<Cr>

" Opens a split window with the corresponding spec file of what you're currently working on
function! OpenSpec()
  let spec_file = substitute(expand('%'), ".rb$", "_spec.rb", "")
  exec ":vs"
  exec ":wincmd l"
  exec ":e spec/" . spec_file
endfunction
map <leader>k :call OpenSpec()<cr>

" Quickly renames a file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>` :call RenameFile()<cr>

function! TexRel()
  exec 'silent !pdflatex main && xdg-open main.pdf'
  redraw!
endfunction
map <leader>tr :call TexRel()<cr>

#!/usr/bin/env ruby

require 'open-uri'
require "json"

class RepoSearch
  GH_URL = 'https://api.github.com/search/repositories'
  BROWSER = '/usr/bin/google-chrome'

  def lookup_repo(query)
    if query.empty?
      puts "Error: Need something to look for."
      return new_search
    end
    @query = query

    result = request
    count = result['total_count']
    puts "Repositories found: #{count}"
    puts delim

    new_search and return if count.zero?

    @relevant = result['items'].take(20)
    @relevant.each_with_index do |item, i|
      name = item['full_name'].to_s
      desc = item['description'].to_s

      id = sprintf("%2d", i + 1)
      n  = sprintf("%-35s", truncate(name, 34))
      d = truncate(desc)

      puts "#{id}: #{n} || #{d}"
    end
    puts delim
    handle_input
  end

  def handle_input
    prompt
    while answer = $stdin.gets.chomp
      case answer
      when 'h'      then show_help
      when 'q'      then say_goodbye
      when 'n'      then break new_search
      when /^c(\d*)(.*)/ then clone_it($1, $2)
      when /^(\d*)(.*)/  then view_it($1, $2)
      else warning
      end
      come_again
    end
  end

  def prompt
    puts "What is thy bidding master? (type h for help, q to quit)"
    print "==> "
  end

  def new_search
    puts
    print 'Enter a new query ==> '
    input = $stdin.gets.chomp
    puts
    lookup_repo(input)
  end

  def show_help
    puts
    puts "USAGE"
    puts '----- Handling results'
    helpline('1', 'views repo number 1 in a new Chrome tab')
    helpline('c2', 'clones repo number 2')
    helpline('<CR>', 'shortcut for 1')
    puts
    puts '------- Optional params'
    helpline('-d', 'allows to specify a directory to clone into')
    puts
    puts '----- Runtime handling'
    helpline('n', 'starts a new search')
    helpline('q', 'quits the program')
    helpline('h', 'shows these usage instructions')
  end

  def helpline(a, b)
    print sprintf("%5s", a) + '   '
    puts b
  end

  def clone_it(answer, options)
    answer = answer.to_i
    if invalid?(answer)
      warning
    else
      el = take(answer)
      ssh = el['ssh_url']
      opts = parse_options(options)
      system("git clone #{ssh} #{opts[:dir]}")
    end
  end

  def parse_options(options)
    opts = {}
    case options
    when /-d (.*)/ then opts[:dir] = $1
    end
    opts
  end

  def view_it(answer, options)
    answer = answer.to_i
    # coming from a plain enter hit (nil to "" to 0),
    # we take a shortcut to the best hit.
    answer += 1 if answer == 0
    if invalid?(answer)
      warning
    else
      el = take(answer)
      url = el['html_url']
      puts "Viewing #{url}"
      system("#{BROWSER} --new-tab #{url}")
    end
  end

  def take(i)
    @relevant[i - 1]
  end

  def invalid?(answer)
    @relevant.size < answer
  end

  def warning
    puts 'Did not understand your input, try again.'
  end

  def come_again
    puts
    prompt
  end

  def say_goodbye
    puts
    puts 'Good bye!'
    puts
    exit
  end

  def delim
    '==============================================================='
  end

  def truncate(string, length = 65)
    if string.length > length
      "#{string[0..(length - 4)]} ..."
    else
      string
    end
  end

  def query_string
    "?q=#{@query}+in:name"
  end

  def request
    puts "Searching #{req_string}"
    JSON.parse(URI(req_string).read)
  end

  def req_string
    "#{GH_URL}#{query_string}"
  end
end

RepoSearch.new.lookup_repo(ARGV.shift.to_s)

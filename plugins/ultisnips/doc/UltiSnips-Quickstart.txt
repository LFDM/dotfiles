*UltiSnips-Quickstart.txt*    For Vim version 7.0 or later.

        The Ultimate Plugin for Snippets in Vim - forked version~


Please also have a look at README.rst which talks about why this fork
exists. Section 3 is most important

CONTENTS:

  1. Contact / need help / bugs
  2. Installation
  3. SETUP / CONFIGURATION / how does this fork work ?
  4. FAQ

  10. More documentation

  98a. Notes for snipmate(-snippets) users:
  98b. Notes for UltiSnips users:

  99. known bugs

  999. links

==============================================================================
1. Contact / need help / bugs

bugs:
file against github.com/MarcWeber/ultisnips unless you're sure they also
happen on the [parent_ultisnips] project.
Then use [SirVer's bugtracker]

help:
If in trouble read documentation. If you still have trouble you can contact me
by irc (MarcWeber @ irc.freenode.net) or mail: marco-oweber@gmx.de.
Also See bugs at README.rst

==============================================================================
2. Installation

I don't care. I personally prefer vim-addon-manager (cause I wrote it for good
reasons), but all the other tools pathogen, vundle, .. should also get the job
done.

You may want to add the external snippet repository
github.com/honza/vim-snippets to runtimepath - then all snippets are
available

==============================================================================
3. SETUP / CONFIGURATION / how does this fork work ?

Which snippets are available ? ~
None by default. I recommend installing github.com/honza/vim-snippets
which contains snipmate snippets and a copy of SirVer's UltiSnips directory
or copying the UltiSnips directory from SirVer's repository. SirVer's
UltiSnips directory is upstream till he joins vim-snippets which I would
highly appreciate.

How does UltiSnips find snippets? ~
Rough reply: It knowsn about your snippets if you set &rtp to contain
the snippets and UltiSnips directories. Thus installing a plugin
such as github/honza/vim-snippets should be enough.

Then it depends on filetype and *_ft_filter settings which of those files get
loaded.

Eg when editing a filetype html you can tell UltiSnips to load
1) UltiSnips/html.snippets
2) UltiSnips/javascript.snippets
3) snipmate-snippets/javascript.snippets
in any runtimepath.

If you want to explore all details read the default VimL function
SnippetFilesForCurrentExpansionDefaultImplementation.
You can either provide your own function, or override the python function
calling the VimL function.

Snippet files are loaded as needed needed and reloaded automatically if their
file modification timestamp changes.
While loading snipmate snippets some errors may happen especially when
translating snipmate files.
Then quickfix is populated so that you can explore the cause fast (:cope).
For details See doc/UltiSnips.txt section "3.3 Snippet Search Path".

.vimrc setup ~
  >
    " declare global configuration dictionary so that config options can be added:
    let g:UltiSnips = {}

    " customize mappings, eg use snipmate like behaviour
    " let g:UltiSnips.ExpandTrigger = "<tab>"
    " " It does make sense to not use <tab> here, use UltiSnips default <c-j>
    " " let g:UltiSnips.JumpForwardTrigger = "<tab>"
    " let g:UltiSnips.JumpBackwardTrigger = "<c-k>"

    " Now its time to tell UltiSnips about which snippets to load.
    " You do so for snipmate snippets and UltiSnips snippets individually.
    " This example illustrates a setup loading snipmate snippets.

    " See plugin/UltiSnips.vim, it has much additional documentation.
    " Assuming you're not overrding the default implemenation in the
    " VimL function SnippetFilesForCurrentExpansionDefaultImplementation.

    " == UltiSnips snippets ==
    " Because I want to use the snipmate snippets 'default' does not load
    " filetype.snippets snippet files.
    " SirVer called the snippets to be present for all filetypes "all".
    " So this fork follows his convention. Compare with _ which is used by
    " snipmate but means the same.
    "
    " Now the default implementation reads &filetype, looks up the key in the
    " dictionary and falls back to the default entry if there is no filetype
    " specific entry.
    "
    " Thus if you're editing a cpp file ['cpp'] means that
    " &rtp/UltiSnips/cpp.snippets and ..../all.snippets will be loaded if
    " UltiSnips directory happens to be in your [._].vim directory only.
    "
    " For all other filetypes 'default' applies, which loads all.snippets
    " from all &rtp/UltiSnips directories.
    let g:UltiSnips.UltiSnips_ft_filter = {
                \ 'default' : {'filetypes': ['all'] },
                \ 'all' : {'filetypes': ['all'] },
                \ 'cpp' : {'filetypes': ['cpp', 'all'], 'dir-regex': '[._]vim/UltiSnips$' },
                \ }
    " In the 'default' case the special word FILETYPE will be replaced by
    " &filetype, thus ['all','FILETYPE'] will load &rtp/html.snippets if
    " you're editing html files.

    " choices could be nasty, never show them
    let g:UltiSnips.always_use_first_snippet = 1

    " == snipmate snippets ==
    " _.snippets are meant to be snippets to be loaded always which is why
    " they are contained in all cases
    " This is pretty much the same as above:
    " * For html, xhtml snipmate &rtp/snippets/javascript snippets get loaded
    " * For cpp don't load any snipmate &rtp/snippets - because in this
    "   example UltiSnips snippets are preferred
    let g:UltiSnips.snipmate_ft_filter = {
                \ 'default' : {'filetypes': ["FILETYPE", "_"] },
                \ 'html'    : {'filetypes': ["html", "javascript", "_"] },
                \ 'xhtml'    : {'filetypes': ["xhtml", "html", "javascript", "_"] },
                \ 'cpp'    : {'filetypes': [] },
                \ }

    " Of course you want to adjust this to your own liking

==============================================================================
4. FAQ

What are (UltiSnips) snippets? ~
The native format, see 10.

What are snipmate-snippets? ~
Files having such a path: snippets/*.snippet
snippets start by "snippet", the snippet code is always prefixed by one <tab>,
leading <tab>s are replaced by indentation &sw when expanding.

UltiSnips snippets are more powerful, they allow "nested" placeholders and
such. See 10.

==============================================================================
10. More documentation

See doc/UltiSnips.txt


==============================================================================
98a. Notes for snipmate(-snippets) users:

UltiSnips now supports the same feature as snipmate: visually selecting
snippet text then hitting <cr> or running :RetabSnip will replace spaces by
<tab> characters. <tab> indicates "one indentation level" snipmate-snippets
files

_.snippets namespace (used always) is "all.snippets" namespace in UltiSnips.
You can still keep using "_" as seen above.

UltiSnips provides two different mappings for expand and jump to next
placeholder. This is because an expansion name might be the same as a var
name. So consider adopting to using two different mappings.

Also be aware that UltiSnips snippets are more powerful. Eg nested
placeholders are supported. See doc/UltiSnips.txt

==============================================================================
98b. Notes for UltiSnips users:
Please read the comments about how snippets are found and loaded carefully.
This changed.

See BUG [1]


==============================================================================
99. known bugs

BUG [1]:
The "extends foo" syntax causes errors. The fix is to
- delete it
- tell UltiSnips manually that eg zsh should load sh files as seen in
  plugin/UltiSnips.vim
I'm sorry about this, probably this is "won't fix" because it would take too
much time.

- This fork does not tell YouCompleteMe about available snippets
  If its very important to you help me fix it


There are probably more. Also see snipmate-merge-todo

==============================================================================
999. links

[parent_ultisnips]: See README.rst
[SirVer's bugtracker]: https://bugs.launchpad.net/ultisnips

vim:tw=78:ts=8:ft=help:norl:
